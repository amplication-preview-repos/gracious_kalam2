/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CommunicationRequest } from "./CommunicationRequest";
import { CommunicationRequestCountArgs } from "./CommunicationRequestCountArgs";
import { CommunicationRequestFindManyArgs } from "./CommunicationRequestFindManyArgs";
import { CommunicationRequestFindUniqueArgs } from "./CommunicationRequestFindUniqueArgs";
import { CreateCommunicationRequestArgs } from "./CreateCommunicationRequestArgs";
import { UpdateCommunicationRequestArgs } from "./UpdateCommunicationRequestArgs";
import { DeleteCommunicationRequestArgs } from "./DeleteCommunicationRequestArgs";
import { Satellite } from "../../satellite/base/Satellite";
import { Schedule } from "../../schedule/base/Schedule";
import { User } from "../../user/base/User";
import { CommunicationRequestService } from "../communicationRequest.service";
@graphql.Resolver(() => CommunicationRequest)
export class CommunicationRequestResolverBase {
  constructor(protected readonly service: CommunicationRequestService) {}

  async _communicationRequestsMeta(
    @graphql.Args() args: CommunicationRequestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CommunicationRequest])
  async communicationRequests(
    @graphql.Args() args: CommunicationRequestFindManyArgs
  ): Promise<CommunicationRequest[]> {
    return this.service.communicationRequests(args);
  }

  @graphql.Query(() => CommunicationRequest, { nullable: true })
  async communicationRequest(
    @graphql.Args() args: CommunicationRequestFindUniqueArgs
  ): Promise<CommunicationRequest | null> {
    const result = await this.service.communicationRequest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CommunicationRequest)
  async createCommunicationRequest(
    @graphql.Args() args: CreateCommunicationRequestArgs
  ): Promise<CommunicationRequest> {
    return await this.service.createCommunicationRequest({
      ...args,
      data: {
        ...args.data,

        satellite: args.data.satellite
          ? {
              connect: args.data.satellite,
            }
          : undefined,

        schedule: args.data.schedule
          ? {
              connect: args.data.schedule,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => CommunicationRequest)
  async updateCommunicationRequest(
    @graphql.Args() args: UpdateCommunicationRequestArgs
  ): Promise<CommunicationRequest | null> {
    try {
      return await this.service.updateCommunicationRequest({
        ...args,
        data: {
          ...args.data,

          satellite: args.data.satellite
            ? {
                connect: args.data.satellite,
              }
            : undefined,

          schedule: args.data.schedule
            ? {
                connect: args.data.schedule,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CommunicationRequest)
  async deleteCommunicationRequest(
    @graphql.Args() args: DeleteCommunicationRequestArgs
  ): Promise<CommunicationRequest | null> {
    try {
      return await this.service.deleteCommunicationRequest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Satellite, {
    nullable: true,
    name: "satellite",
  })
  async getSatellite(
    @graphql.Parent() parent: CommunicationRequest
  ): Promise<Satellite | null> {
    const result = await this.service.getSatellite(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Schedule, {
    nullable: true,
    name: "schedule",
  })
  async getSchedule(
    @graphql.Parent() parent: CommunicationRequest
  ): Promise<Schedule | null> {
    const result = await this.service.getSchedule(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(
    @graphql.Parent() parent: CommunicationRequest
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
