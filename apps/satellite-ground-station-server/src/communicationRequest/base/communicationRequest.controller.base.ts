/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CommunicationRequestService } from "../communicationRequest.service";
import { CommunicationRequestCreateInput } from "./CommunicationRequestCreateInput";
import { CommunicationRequest } from "./CommunicationRequest";
import { CommunicationRequestFindManyArgs } from "./CommunicationRequestFindManyArgs";
import { CommunicationRequestWhereUniqueInput } from "./CommunicationRequestWhereUniqueInput";
import { CommunicationRequestUpdateInput } from "./CommunicationRequestUpdateInput";

export class CommunicationRequestControllerBase {
  constructor(protected readonly service: CommunicationRequestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CommunicationRequest })
  async createCommunicationRequest(
    @common.Body() data: CommunicationRequestCreateInput
  ): Promise<CommunicationRequest> {
    return await this.service.createCommunicationRequest({
      data: {
        ...data,

        satellite: data.satellite
          ? {
              connect: data.satellite,
            }
          : undefined,

        schedule: data.schedule
          ? {
              connect: data.schedule,
            }
          : undefined,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        satellite: {
          select: {
            id: true,
          },
        },

        schedule: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CommunicationRequest] })
  @ApiNestedQuery(CommunicationRequestFindManyArgs)
  async communicationRequests(
    @common.Req() request: Request
  ): Promise<CommunicationRequest[]> {
    const args = plainToClass(CommunicationRequestFindManyArgs, request.query);
    return this.service.communicationRequests({
      ...args,
      select: {
        createdAt: true,
        id: true,

        satellite: {
          select: {
            id: true,
          },
        },

        schedule: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CommunicationRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async communicationRequest(
    @common.Param() params: CommunicationRequestWhereUniqueInput
  ): Promise<CommunicationRequest | null> {
    const result = await this.service.communicationRequest({
      where: params,
      select: {
        createdAt: true,
        id: true,

        satellite: {
          select: {
            id: true,
          },
        },

        schedule: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CommunicationRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCommunicationRequest(
    @common.Param() params: CommunicationRequestWhereUniqueInput,
    @common.Body() data: CommunicationRequestUpdateInput
  ): Promise<CommunicationRequest | null> {
    try {
      return await this.service.updateCommunicationRequest({
        where: params,
        data: {
          ...data,

          satellite: data.satellite
            ? {
                connect: data.satellite,
              }
            : undefined,

          schedule: data.schedule
            ? {
                connect: data.schedule,
              }
            : undefined,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          satellite: {
            select: {
              id: true,
            },
          },

          schedule: {
            select: {
              id: true,
            },
          },

          status: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CommunicationRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCommunicationRequest(
    @common.Param() params: CommunicationRequestWhereUniqueInput
  ): Promise<CommunicationRequest | null> {
    try {
      return await this.service.deleteCommunicationRequest({
        where: params,
        select: {
          createdAt: true,
          id: true,

          satellite: {
            select: {
              id: true,
            },
          },

          schedule: {
            select: {
              id: true,
            },
          },

          status: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
