/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CommunicationRequest as PrismaCommunicationRequest,
  Satellite as PrismaSatellite,
  Schedule as PrismaSchedule,
  User as PrismaUser,
} from "@prisma/client";

export class CommunicationRequestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CommunicationRequestCountArgs, "select">
  ): Promise<number> {
    return this.prisma.communicationRequest.count(args);
  }

  async communicationRequests<
    T extends Prisma.CommunicationRequestFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.CommunicationRequestFindManyArgs>
  ): Promise<PrismaCommunicationRequest[]> {
    return this.prisma.communicationRequest.findMany<Prisma.CommunicationRequestFindManyArgs>(
      args
    );
  }
  async communicationRequest<
    T extends Prisma.CommunicationRequestFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.CommunicationRequestFindUniqueArgs>
  ): Promise<PrismaCommunicationRequest | null> {
    return this.prisma.communicationRequest.findUnique(args);
  }
  async createCommunicationRequest<
    T extends Prisma.CommunicationRequestCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.CommunicationRequestCreateArgs>
  ): Promise<PrismaCommunicationRequest> {
    return this.prisma.communicationRequest.create<T>(args);
  }
  async updateCommunicationRequest<
    T extends Prisma.CommunicationRequestUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.CommunicationRequestUpdateArgs>
  ): Promise<PrismaCommunicationRequest> {
    return this.prisma.communicationRequest.update<T>(args);
  }
  async deleteCommunicationRequest<
    T extends Prisma.CommunicationRequestDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.CommunicationRequestDeleteArgs>
  ): Promise<PrismaCommunicationRequest> {
    return this.prisma.communicationRequest.delete(args);
  }

  async getSatellite(parentId: string): Promise<PrismaSatellite | null> {
    return this.prisma.communicationRequest
      .findUnique({
        where: { id: parentId },
      })
      .satellite();
  }

  async getSchedule(parentId: string): Promise<PrismaSchedule | null> {
    return this.prisma.communicationRequest
      .findUnique({
        where: { id: parentId },
      })
      .schedule();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.communicationRequest
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
