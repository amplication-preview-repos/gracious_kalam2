/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Satellite } from "./Satellite";
import { SatelliteCountArgs } from "./SatelliteCountArgs";
import { SatelliteFindManyArgs } from "./SatelliteFindManyArgs";
import { SatelliteFindUniqueArgs } from "./SatelliteFindUniqueArgs";
import { CreateSatelliteArgs } from "./CreateSatelliteArgs";
import { UpdateSatelliteArgs } from "./UpdateSatelliteArgs";
import { DeleteSatelliteArgs } from "./DeleteSatelliteArgs";
import { CommunicationRequestFindManyArgs } from "../../communicationRequest/base/CommunicationRequestFindManyArgs";
import { CommunicationRequest } from "../../communicationRequest/base/CommunicationRequest";
import { SatelliteService } from "../satellite.service";
@graphql.Resolver(() => Satellite)
export class SatelliteResolverBase {
  constructor(protected readonly service: SatelliteService) {}

  async _satellitesMeta(
    @graphql.Args() args: SatelliteCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Satellite])
  async satellites(
    @graphql.Args() args: SatelliteFindManyArgs
  ): Promise<Satellite[]> {
    return this.service.satellites(args);
  }

  @graphql.Query(() => Satellite, { nullable: true })
  async satellite(
    @graphql.Args() args: SatelliteFindUniqueArgs
  ): Promise<Satellite | null> {
    const result = await this.service.satellite(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Satellite)
  async createSatellite(
    @graphql.Args() args: CreateSatelliteArgs
  ): Promise<Satellite> {
    return await this.service.createSatellite({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Satellite)
  async updateSatellite(
    @graphql.Args() args: UpdateSatelliteArgs
  ): Promise<Satellite | null> {
    try {
      return await this.service.updateSatellite({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Satellite)
  async deleteSatellite(
    @graphql.Args() args: DeleteSatelliteArgs
  ): Promise<Satellite | null> {
    try {
      return await this.service.deleteSatellite(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [CommunicationRequest], {
    name: "communicationRequests",
  })
  async findCommunicationRequests(
    @graphql.Parent() parent: Satellite,
    @graphql.Args() args: CommunicationRequestFindManyArgs
  ): Promise<CommunicationRequest[]> {
    const results = await this.service.findCommunicationRequests(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }
}
