/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Satellite as PrismaSatellite,
  CommunicationRequest as PrismaCommunicationRequest,
} from "@prisma/client";

export class SatelliteServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SatelliteCountArgs, "select">
  ): Promise<number> {
    return this.prisma.satellite.count(args);
  }

  async satellites<T extends Prisma.SatelliteFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SatelliteFindManyArgs>
  ): Promise<PrismaSatellite[]> {
    return this.prisma.satellite.findMany<Prisma.SatelliteFindManyArgs>(args);
  }
  async satellite<T extends Prisma.SatelliteFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SatelliteFindUniqueArgs>
  ): Promise<PrismaSatellite | null> {
    return this.prisma.satellite.findUnique(args);
  }
  async createSatellite<T extends Prisma.SatelliteCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SatelliteCreateArgs>
  ): Promise<PrismaSatellite> {
    return this.prisma.satellite.create<T>(args);
  }
  async updateSatellite<T extends Prisma.SatelliteUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SatelliteUpdateArgs>
  ): Promise<PrismaSatellite> {
    return this.prisma.satellite.update<T>(args);
  }
  async deleteSatellite<T extends Prisma.SatelliteDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SatelliteDeleteArgs>
  ): Promise<PrismaSatellite> {
    return this.prisma.satellite.delete(args);
  }

  async findCommunicationRequests(
    parentId: string,
    args: Prisma.CommunicationRequestFindManyArgs
  ): Promise<PrismaCommunicationRequest[]> {
    return this.prisma.satellite
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .communicationRequests(args);
  }
}
