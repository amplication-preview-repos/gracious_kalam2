/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SatelliteService } from "../satellite.service";
import { SatelliteCreateInput } from "./SatelliteCreateInput";
import { Satellite } from "./Satellite";
import { SatelliteFindManyArgs } from "./SatelliteFindManyArgs";
import { SatelliteWhereUniqueInput } from "./SatelliteWhereUniqueInput";
import { SatelliteUpdateInput } from "./SatelliteUpdateInput";
import { CommunicationRequestFindManyArgs } from "../../communicationRequest/base/CommunicationRequestFindManyArgs";
import { CommunicationRequest } from "../../communicationRequest/base/CommunicationRequest";
import { CommunicationRequestWhereUniqueInput } from "../../communicationRequest/base/CommunicationRequestWhereUniqueInput";

export class SatelliteControllerBase {
  constructor(protected readonly service: SatelliteService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Satellite })
  async createSatellite(
    @common.Body() data: SatelliteCreateInput
  ): Promise<Satellite> {
    return await this.service.createSatellite({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Satellite] })
  @ApiNestedQuery(SatelliteFindManyArgs)
  async satellites(@common.Req() request: Request): Promise<Satellite[]> {
    const args = plainToClass(SatelliteFindManyArgs, request.query);
    return this.service.satellites({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Satellite })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async satellite(
    @common.Param() params: SatelliteWhereUniqueInput
  ): Promise<Satellite | null> {
    const result = await this.service.satellite({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        typeField: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Satellite })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSatellite(
    @common.Param() params: SatelliteWhereUniqueInput,
    @common.Body() data: SatelliteUpdateInput
  ): Promise<Satellite | null> {
    try {
      return await this.service.updateSatellite({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Satellite })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSatellite(
    @common.Param() params: SatelliteWhereUniqueInput
  ): Promise<Satellite | null> {
    try {
      return await this.service.deleteSatellite({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/communicationRequests")
  @ApiNestedQuery(CommunicationRequestFindManyArgs)
  async findCommunicationRequests(
    @common.Req() request: Request,
    @common.Param() params: SatelliteWhereUniqueInput
  ): Promise<CommunicationRequest[]> {
    const query = plainToClass(CommunicationRequestFindManyArgs, request.query);
    const results = await this.service.findCommunicationRequests(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        satellite: {
          select: {
            id: true,
          },
        },

        schedule: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/communicationRequests")
  async connectCommunicationRequests(
    @common.Param() params: SatelliteWhereUniqueInput,
    @common.Body() body: CommunicationRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      communicationRequests: {
        connect: body,
      },
    };
    await this.service.updateSatellite({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/communicationRequests")
  async updateCommunicationRequests(
    @common.Param() params: SatelliteWhereUniqueInput,
    @common.Body() body: CommunicationRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      communicationRequests: {
        set: body,
      },
    };
    await this.service.updateSatellite({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/communicationRequests")
  async disconnectCommunicationRequests(
    @common.Param() params: SatelliteWhereUniqueInput,
    @common.Body() body: CommunicationRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      communicationRequests: {
        disconnect: body,
      },
    };
    await this.service.updateSatellite({
      where: params,
      data,
      select: { id: true },
    });
  }
}
